version: '3.8'

services:
  # PortTrack Application (Direct access - AWS API Gateway used)
  porttrack-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: porttrack-app
    ports:
      - "3000:3000"
      - "9090:9090"
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - APP_NAME=PortTrack
      - APP_VERSION=1.0.0
      - DB_HOST=porttrack-postgresql
      - DB_PORT=5432
      - DB_NAME=porttrack_dev
      - DB_USER=porttrack_user
      - DB_PASSWORD=porttrack_password
      - REDIS_HOST=porttrack-redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_HOST=porttrack-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - LOG_LEVEL=debug
      - METRICS_PORT=9090
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - porttrack-postgresql
      - porttrack-redis
      - porttrack-elasticsearch
    networks:
      - porttrack-network
    restart: unless-stopped

  # PostgreSQL Database
  porttrack-postgresql:
    image: postgres:15-alpine
    container_name: porttrack-postgresql
    environment:
      - POSTGRES_DB=porttrack_dev
      - POSTGRES_USER=porttrack_user
      - POSTGRES_PASSWORD=porttrack_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - porttrack-network
    restart: unless-stopped

  # Redis Cache
  porttrack-redis:
    image: redis:7-alpine
    container_name: porttrack-redis
    command: redis-server --appendonly yes --requirepass porttrack_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - porttrack-network
    restart: unless-stopped

  # MongoDB (NoSQL)
  porttrack-mongodb:
    image: mongo:7.0
    container_name: porttrack-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=porttrack_admin
      - MONGO_INITDB_ROOT_PASSWORD=porttrack_mongo_password
      - MONGO_INITDB_DATABASE=porttrack_nosql
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - porttrack-network
    restart: unless-stopped

  # Elasticsearch
  porttrack-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: porttrack-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=porttrack-cluster
      - node.name=porttrack-node-1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - porttrack-network
    restart: unless-stopped

  # Logstash
  porttrack-logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: porttrack-logstash
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    depends_on:
      - porttrack-elasticsearch
    networks:
      - porttrack-network
    restart: unless-stopped

  # Kibana
  porttrack-kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: porttrack-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://porttrack-elasticsearch:9200
      - SERVER_NAME=porttrack-kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    volumes:
      - kibana_data:/usr/share/kibana/data
    depends_on:
      - porttrack-elasticsearch
    networks:
      - porttrack-network
    restart: unless-stopped

  # Prometheus
  porttrack-prometheus:
    image: prom/prometheus:v2.47.0
    container_name: porttrack-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9091:9090"
    volumes:
      - ./k8s/monitoring/prometheus-config.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - porttrack-network
    restart: unless-stopped

  # AlertManager
  porttrack-alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: porttrack-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.enable-lifecycle'
    ports:
      - "9092:9093"
    volumes:
      - ./k8s/monitoring/alertmanager-config.yaml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - porttrack-network
    restart: unless-stopped

  # Grafana
  porttrack-grafana:
    image: grafana/grafana:10.1.0
    container_name: porttrack-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=porttrack_admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - porttrack-prometheus
      - porttrack-elasticsearch
    networks:
      - porttrack-network
    restart: unless-stopped

  # Jaeger (Distributed Tracing)
  porttrack-jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: porttrack-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_JAEGER_DISABLED=false
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    volumes:
      - jaeger_data:/tmp
    networks:
      - porttrack-network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  porttrack-nginx:
    image: nginx:alpine
    container_name: porttrack-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - porttrack-app
      - porttrack-grafana
      - porttrack-kibana
    networks:
      - porttrack-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local

networks:
  porttrack-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
